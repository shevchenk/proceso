<?php

class EnvioAutomaticoController extends \BaseController {
    /**
     * Display a listing of the resource.
     * GET /prueba
     *
     * @return Response
     */
    public function postActividadesdiariasalertasjefe() {
        $array = array();
        $array['usuario'] = Auth::user()->id;

        $retorno = array(
            'rst' => 1
        );

        $html = "";
        $meses = array('', 'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Setiembre', 'Octubre', 'Noviembre', 'Diciembre');

        $n = 1;

        $hoy = date('Y-m-d');
        $hoy = '2017-02-13';
        $dia_validar = date('w', strtotime($hoy));
        if ($dia_validar == 1) {

            $listar = Area::getAreaNotificacion();
           
            foreach ($listar as $value) {
                
            $fechaFin = strtotime('-1 day', strtotime($hoy));
            $fechaFin = date('Y-m-d', $fechaFin);
            $fechaIni = strtotime('-7 day', strtotime($hoy));
            $fechaIni = date('Y-m-d', $fechaIni);

            $sSql = '';
            $sSqls = '';
            $cl = '';
            $left = '';
            ;
            $f_fecha = '';
            $cabecera = [];

            $f_fecha .= " AND DATE(ap.fecha_inicio) BETWEEN '" . $fechaIni . "' AND '" . $fechaFin . "' ";


            $fechaIni_ = strtotime($fechaIni);
            $fechaFin_ = strtotime($fechaFin);
            $fecha = date_create($fechaIni);
            $n = 1;
            for ($i = $fechaIni_; $i <= $fechaFin_; $i += 86400) {
                $cl .= ",COUNT(ap$n.id) AS f$n,IFNULL(SEC_TO_TIME(ABS(SUM(ap$n.ot_tiempo_transcurrido)) * 60),'00:00')  h$n";
                $left .= "LEFT JOIN actividad_personal ap$n on ap$n.id=ap.id AND  DATE(ap.fecha_inicio) = STR_TO_DATE('" . date("d-m-Y", $i) . "','%d-%m-%Y')";
                $n++;

                array_push($cabecera, date_format($fecha, 'Y-m-d'));
                date_add($fecha, date_interval_create_from_date_string('1 days'));
            }

            $sSql .= "SELECT a.nombre as area,CONCAT_WS(' ',p.paterno,p.materno,p.nombre) as persona";
            $sSql .= $cl;
            $sSql .= ",COUNT(ap.id) AS f_total,IFNULL(SEC_TO_TIME(ABS(SUM(ap.ot_tiempo_transcurrido)) * 60),'00:00')  h_total";
            $sSql .= " FROM personas p
                 INNER JOIN areas a on p.area_id=a.id
                 LEFT JOIN actividad_personal ap on ap.persona_id=p.id AND ap.estado=1 AND ap.usuario_created_at=ap.persona_id " . $f_fecha;
            $sSql .= $left;
            $sSql .= " WHERE p.estado=1 AND p.rol_id NOT IN (8,9)";


            $sSql .= " AND p.area_id=".$value->id;

            $sSql .= " GROUP BY p.id";

            $oData['cabecera'] = $cabecera;
            $oData['data'] = DB::select($sSql);


//                foreach ($actividades as $value) {

            $html = "";
            $html_cabecera = "";
            $html_table = "";
            $pos = 0;
            $html_cabecera .= "<tr>";
            $html_cabecera .= "<th colspan='2'></th>";
            $n = 0;
            foreach ($oData['cabecera'] as $cabecera) {

                $html_cabecera .= "<th colspan='2'>" . $cabecera . "</th>";
                $n++;
            }
            $html_cabecera .= "<th colspan='2'>TOTAL</th>";
            $html_cabecera .= "</tr>";

            $html_cabecera .= "<tr>";
            $html_cabecera .= "<th>N°</th>";
//                $html_cabecera .= "<th>Area</th>";
            $html_cabecera .= "<th>Persona</th>";
            $n = 0;
            foreach ($oData['cabecera'] as $cabecera) {

                $html_cabecera .= "<th >N° A.</th>";
                $html_cabecera .= "<th >N° H.</th>";
                $n++;
            }

            $html_cabecera .= "<th>N° Acti. Total</th>";
            $html_cabecera .= "<th>Total de Horas</th>";
            $html_cabecera .= "</tr>";

            $array = json_decode(json_encode($oData['data']), true);
            foreach ($array as $data) {
                $pos++;
                $html .= "<tr>";
                $html .= "<td>" . $pos . "</td>";
//                     $html .="<td>" . $data->area . "</td>" ;
                $html .= "<td>" . $data['persona'] . "</td>";

                for ($i = 1; $i <= $n; $i++) {
                    $hora = $data['h' . $i];
                    if ($data['h' . $i] != null) {
                        $hora = substr($data['h' . $i], 0, 5);
                    }
                    if ($data['h' . $i] >= 06) {
                        $style = ';background-color:#7BF7AE';
                    } else {
                        $style = ';background-color:#FE4E4E';
                    }
                    $html .= '<td style="' . $style . '">' . $data['f' . $i] . '</td>';
                    $html .= '<td style="' . $style . '">' . $hora . "</td>";
                }

                $hora_t = substr($data['h_total'], 0, 5);

                $html .= '<td>' . $data['f_total'] . "</td>";
                $html .= '<td>' . $hora_t . "</td>";


                $html .= "</tr>";
            }
            $html_table .= '<table border="1" cellspacing="0">  ';
            $html_table .= ' <thead>';
            $html_table .= $html_cabecera;
            $html_table .= ' </thead>';
            $html_table .= '<tbody>';
            $html_table .= $html;
            $html_table .= '</tbody>';
            $html_table .= '</table >';

//                }
             $sSqls.= " SELECT CONCAT_WS(' ',paterno,materno,nombre)as persona,IFNULL(CONCAT(email,',',email_mdi),',') as email_jefe,
			(SELECT CONCAT(email,',',email_mdi)
                         FROM personas 
                         where area_id in (53)
                         and rol_id in (9,8)
                         and estado=1
                         order by area_id
                         LIMIT 0,1) email_personal
                         FROM personas 
                         where area_id=".$value->id;
                     
              $sSqls.= " and rol_id in (9,8)
                         and estado=1
                         LIMIT 0,1";

            $jefe = DB::select($sSqls);
            
            $plantilla = Plantilla::where('tipo', '=', '10')->first();
            $buscar = array('persona:', 'dia:', 'mes:', 'año:', 'persona:', 'tabla:');
            $reemplazar = array($jefe[0]->persona, date('d'), $meses[date('n')], date("Y"),$jefe[0]->persona,$html_table);
            $parametros = array(
                'cuerpo' => str_replace($buscar, $reemplazar, $plantilla->cuerpo)
            );
            
            $emailpersonal = explode(",", $jefe[0]->email_personal);
            $emailjefe = array();
            $emailjefeauxi = explode(",", $jefe[0]->email_jefe);
            
            
            if (trim($emailjefeauxi[0]) != '') {
                array_push($emailjefe, $emailjefeauxi[0]);
            }
            if (trim($emailjefeauxi[1]) != '') {
                array_push($emailjefe, $emailjefeauxi[1]);
            }

            $emailpersonal = 'rcapchab@gmail.com';
            $emailjefe = array('rcapchab@gmail.com');

            DB::beginTransaction();

//                $update = 'update alertas_actividad set ultimo_registro=0 where persona_id=' . $value->persona_id;
//                DB::update($update);
//                
//                $insert = 'INSERT INTO alertas_actividad (persona_id,area_id,actividad, minuto, fecha_alerta) 
//                     VALUES (' . $value->persona_id . ',' . $value->area_id . ',' . $value->actividad . ',' . $value->minuto . ',"' . date("Y-m-d h:m:s") . '")';
////                echo $insert;
//                DB::insert($insert);

            try {
                Mail::send('notreirel', $parametros, function($message) use ($emailpersonal, $emailjefe) {
                    $message
                            ->to($emailjefe)
                            ->cc($emailpersonal)
                            ->subject('.::Aviso de Actividad de la Semana::.');
                }
                );
            } catch (Exception $e) {
                //echo $qem[$k]->email."<br>";
                DB::rollback();
            }
            DB::commit();

            $n++;
           }
        }
        $retorno["data"] = $html;

        return Response::json($retorno);
    }

    public function postActividadesdiariasalertas() {
        $array = array();
        $array['usuario'] = Auth::user()->id;

        $retorno = array(
            'rst' => 1
        );

        $html = "";
        $meses = array('', 'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Setiembre', 'Octubre', 'Noviembre', 'Diciembre');

        $n = 1;
        $hoy = date('Y-m-d');
        $ayer = strtotime('-1 day', strtotime($hoy));
        $ayer = date('Y-m-d', $ayer);

        $dia_validar = date('w', strtotime($hoy));
        if ($dia_validar == 1 OR $dia_validar == 2 OR $dia_validar == 3 OR $dia_validar == 4 OR $dia_validar == 5) {

            if ($dia_validar == 1) {
                $ayer = strtotime('-3 day', strtotime($hoy));
                $ayer = date('Y-m-d', $ayer);
            }
            $Ssql = "SELECT p.id as persona_id,p.area_id,a.nombre as area,
                    CONCAT_WS(' ',p.paterno,p.materno,p.nombre) as persona, p.email,p.email_mdi,
                    COUNT(ap.id) AS 'actividad',IFNULL(SUM(ap.ot_tiempo_transcurrido),0) as 'minuto',
                    IF(COUNT(ap.id)>=5,1,0) as val_acti,
                    IF(IFNULL(SUM(ap.ot_tiempo_transcurrido),0)>=360,1,0) as val_minu,
                     (SELECT CONCAT(email,',',email_mdi)
                         FROM personas 
                         where area_id in (53)
                         and rol_id in (9,8)
                         and estado=1
                         order by area_id
                         LIMIT 0,1) email_personal,
                       IFNULL((SELECT CONCAT(email,',',email_mdi)
                         FROM personas 
                         where area_id=p.area_id
                         and rol_id in (9,8)
                         and estado=1
                         LIMIT 0,1),',') email_jefe
                    FROM personas p
                    INNER JOIN areas a on p.area_id=a.id and area_gestion=1
                    LEFT JOIN actividad_personal ap on ap.persona_id=p.id  and DATE(ap.fecha_inicio)= '$ayer' AND ap.usuario_created_at=ap.persona_id AND ap.estado=1
                    WHERE p.estado=1 
                    AND p.rol_id NOT IN (8,9)
                    AND p.actividad=1
                    GROUP BY p.id
                    HAVING val_minu=0";

            $actividades = DB::select($Ssql);

            foreach ($actividades as $value) {

                $html .= "<tr>";
                $html .= "<td>" . $n . "</td>";
                $html .= "<td>" . $value->area . "</td>";
                $html .= "<td>" . $value->persona . "</td>";
                $html .= "<td>" . $value->actividad . "</td>";
                $html .= "<td>" . $value->minuto . "</td>";
                $html .= "<td>" . $value->email_mdi . "</td>";
                $html .= "</tr>";
                $texto = '';

                if ($value->val_minu == 0) {
                    $texto = 'la cantidad mínima de minutos la cual es: 360 minutos por día (6 horas). Usted ha registrado: ' . $value->minuto . ' minuto(s).';
                }
//                if ($value->val_acti == 0 AND $value->val_minu == 1) {
//                    $texto = 'la cantidad mínima de actividades la cual es 5 actividades por día. Usted ha registrado: '.$value->actividad.' actividad(es).';
//                }
//                if ($value->val_acti == 0 AND $value->val_minu == 0) {
//                    $texto = 'la cantidad mínima de actividades y minutos la cual es: 360 minutos por día (6 horas) y 5 actividades por día.'
//                            . ' Usted ha registrado: '.$value->minuto.' minuto(s) y '.$value->actividad.' actividad(es).';
//                }

                $plantilla = Plantilla::where('tipo', '=', '9')->first();
                $buscar = array('persona:', 'dia:', 'mes:', 'año:', 'persona:', 'fechaayer:', 'actividades:');
                $reemplazar = array($value->persona, date('d'), $meses[date('n')], date("Y"), $value->persona, $ayer, $texto);
                $parametros = array(
                    'cuerpo' => str_replace($buscar, $reemplazar, $plantilla->cuerpo)
                );

                $email = array();
                if (trim($value->email_mdi) != '') {
                    array_push($email, $value->email_mdi);
                }
                if (trim($value->email) != '') {
                    array_push($email, $value->email);
                }
                $emailpersonal = explode(",", $value->email_personal);


                $emailjefe = array();
                $emailjefeauxi = explode(",", $value->email_jefe);

                if (trim($emailjefeauxi[0]) != '') {
                    array_push($emailjefe, $emailjefeauxi[0]);
                }
                if (trim($emailjefeauxi[1]) != '') {
                    array_push($emailjefe, $emailjefeauxi[1]);
                }

//                $email = 'consultas.gmgm@gmail.com';
//                $emailpersonal = 'rcapchab@gmail.com';
//                $emailjefe=array('rcapchab@gmail.com');

                DB::beginTransaction();

                $update = 'update alertas_actividad set ultimo_registro=0 where persona_id=' . $value->persona_id;
                DB::update($update);

                $insert = 'INSERT INTO alertas_actividad (persona_id,area_id,actividad, minuto, fecha_alerta) 
                     VALUES (' . $value->persona_id . ',' . $value->area_id . ',' . $value->actividad . ',' . $value->minuto . ',"' . date("Y-m-d h:m:s") . '")';
//                echo $insert;
                DB::insert($insert);

                try {
                    Mail::queue('notreirel', $parametros, function($message) use ($email, $emailpersonal, $emailjefe) {
                        $message
                                ->to($email)
                                ->cc($emailpersonal, $emailjefe)
                                ->subject('.::Aviso de Actividad::.');
                    }
                    );
                } catch (Exception $e) {
                    //echo $qem[$k]->email."<br>";
                    DB::rollback();
                }
                DB::commit();

                $n++;
            }
        }
        $retorno["data"] = $html;

        return Response::json($retorno);
    }

    public function postContratacionesalertas() {
        $array = array();
        $array['usuario'] = Auth::user()->id;

        $retorno = array(
            'rst' => 1
        );

        $html = "";
        $meses = array('', 'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Setiembre', 'Octubre', 'Noviembre', 'Diciembre');

        $n = 1;

        $Ssql = "SELECT c.id,c.area_id,1 as titulo,c.titulo as descripcion,a.nombre as area,CONCAT(p.paterno,' ',p.materno,' ',p.nombre) as persona,p.id persona_id,1 as tipo,
                p.email,p.email_mdi,c.fecha_aviso,c.programacion_aviso,c.fecha_inicio,c.fecha_fin
                FROM contratacion c
                INNER JOIN areas a on c.area_id=a.id
                INNER JOIN personas p on p.area_id=a.id and rol_id in (9,8) 
                LEFT JOIN alertas_contratacion ac ON ac.general_id=c.id AND ac.tipo_id=1 AND ac.ultimo_registro=1
                WHERE c.estado=1 
                AND 
                (c.fecha_aviso=curdate() OR
                ADDDATE(ac.fecha_alerta,INTERVAL c.programacion_aviso day)=curdate()
                ) AND  ISNULL(c.fecha_conformidad)

                UNION

                SELECT cr.id,c.area_id,c.titulo,cr.texto,a.nombre as area,CONCAT(p.paterno,' ',p.materno,' ',p.nombre) as persona,p.id persona_id,2 as tipo,
                p.email,p.email_mdi,cr.fecha_aviso,cr.programacion_aviso,cr.fecha_inicio,cr.fecha_fin
                FROM contra_reque cr
                INNER JOIN contratacion c on cr.contratacion_id=c.id
                INNER JOIN areas a on c.area_id=a.id
                INNER JOIN personas p on p.area_id=a.id and rol_id in (9,8) 
                LEFT JOIN alertas_contratacion ac ON ac.general_id=cr.id AND ac.tipo_id=2 AND ac.ultimo_registro=1
                WHERE  cr.estado=1 AND 
                (cr.fecha_aviso=curdate() OR
                ADDDATE(ac.fecha_alerta,INTERVAL cr.programacion_aviso day)=curdate()
                ) AND  ISNULL(cr.fecha_conformidad)";

        $contratacion = DB::select($Ssql);

        $sql = 'select area_id,id,email, email_mdi
            from personas
            where area_id in (29)
            and rol_id in (9,8)
            and estado=1
            order by area_id;';
        $e = DB::select($sql);

        foreach ($contratacion as $value) {

            $html .= "<tr>";
            $html .= "<td>" . $n . "</td>";
            $html .= "<td>" . $value->descripcion . "</td>";
            $html .= "<td>" . $value->area . "</td>";
            $html .= "<td>" . $value->persona . "</td>";
            $html .= "<td>" . $value->email . "</td>";
            $html .= "<td>" . $value->email_mdi . "</td>";
            $html .= "</tr>";
            if ($value->tipo == 1) {
                $contratacion = 'Contratación: ' . $value->descripcion;
                $descripcion = 'Contratación con el titulo; ' . $value->descripcion;
                'mencionado arriba.';
                $fechafin = $value->fecha_fin;
            }
            if ($value->tipo == 2) {
                $contratacion = 'Detalle de Contratación: ' . $value->descripcion;
                $descripcion = 'Detalle de Contratación: ' . $value->descripcion;
                $fechafin = $value->fecha_fin . ', correspondiente a la Contratación: ' . $value->titulo;
            }

            $plantilla = Plantilla::where('tipo', '=', '5')->first();
            $buscar = array('persona:', 'dia:', 'mes:', 'año:', 'contratacion:', 'descripcion:', 'fechainicio:', 'fechafinal:');
            $reemplazar = array($value->persona, date('d'), $meses[date('n')], date("Y"), $contratacion, $descripcion, $value->fecha_inicio, $fechafin);
            $parametros = array(
                'cuerpo' => str_replace($buscar, $reemplazar, $plantilla->cuerpo)
            );

            $email = $value->email;
            $email_copia = [$e[0]->email, $e[0]->email_mdi];

//        $email='rcapchab@gmail.com';
//        $email_copia='consultas.gmgm@gmail.com';
            if ($email != '') {

                DB::beginTransaction();
                $update = 'update alertas_contratacion set ultimo_registro=0
                     where general_id=' . $value->id . ' and tipo_id=' . $value->tipo;
                DB::update($update);

                $insert = 'INSERT INTO alertas_contratacion (persona_id,area_id,tipo_id,general_id,fecha_alerta) 
                     VALUES (' . $value->persona_id . ',' . $value->area_id . ',' . $value->tipo . ',' . $value->id . ',"' . date("Y-m-d") . '")';
                DB::insert($insert);

                try {
                    Mail::send('notreirel', $parametros, function($message) use ($email, $email_copia) {
                        $message
                                ->to($email)
                                ->cc($email_copia)
                                ->subject('.::Notificación::.');
                    }
                    );
                } catch (Exception $e) {
                    //echo $qem[$k]->email."<br>";
                    DB::rollback();
                }
                DB::commit();
            }
            $n++;
        }
        $retorno["data"] = $html;

        return Response::json($retorno);
    }

    public function postNotidocplataformaalertas() {
        $array = array();
        $array['usuario'] = Auth::user()->id;
        $array['limit'] = '';
        $array['order'] = '';
        $array['id_union'] = '';
        $array['id_ant'] = '';
        $array['referido'] = ' LEFT ';
        $array['solicitante'] = '';
        $array['areas'] = '';
        $array['proceso'] = '';
        $array['tiempo_final'] = '';

        $meses = array('', 'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Setiembre', 'Octubre', 'Noviembre', 'Diciembre');

        $n = 1;

        $rst = Reporte::Docplataformaalertaenvio();

        foreach ($rst as $key => $value) {

            $alerta = explode("|", $value->alerta);
            $texto = "";
            $tipo = 0;
            $tipo_plat = 0;

            DB::beginTransaction();

            if ($alerta[1] == '') {
                $tipo = 1;
                $tipo_plat = 6;
                $texto = ".::Notificación::.";
            } elseif ($alerta[1] != '' AND $alerta[1] == 1) {
                $tipo = $alerta[1] + 1;
                $tipo_plat = 7;
                $texto = ".::Reiterativo::.";
            } elseif ($alerta[1] != '' AND $alerta[1] == 2) {
                $tipo = $alerta[1] + 1;
                $texto = ".::Relevo::.";
                $tipo_plat = 8;
            } elseif ($alerta[1] != '' AND $alerta[1] == 3) {
                $tipo = 1;
                $texto = ".::Notificación::.";
                $tipo_plat = 6;
            }

            $retorno['texto'][] = $texto;
            $retorno['tipo'][] = $tipo;

            if (trim($alerta[0]) == '' OR $alerta[0] != DATE("Y-m-d")) {
                $retorno['retorno'] = $alerta[0];
                $plantilla = Plantilla::where('tipo', '=', $tipo_plat)->first();
                $buscar = array('persona:', 'dia:', 'mes:', 'año:', 'tramite:', 'area:');
                $reemplazar = array($value->persona, date('d'), $meses[date('n')], date("Y"), $value->plataforma, $value->area);
                $parametros = array(
                    'cuerpo' => str_replace($buscar, $reemplazar, $plantilla->cuerpo)
                );

//            $value->email_mdi='jorgeshevchenk1988@gmail.com';
//            $value->email='rcapchab@gmail.com';
//            $value->email_seguimiento='jorgeshevchenk@gmail.com,jorgesalced0@gmail.com';

                $email = array();
                if (trim($value->email_mdi) != '') {
                    array_push($email, $value->email_mdi);
                }
                if (trim($value->email) != '') {
                    array_push($email, $value->email);
                }
                $emailseguimiento = explode(",", $value->email_seguimiento);
                try {
                    if (count($email) > 0) {

                        Mail::queue('notreirel', $parametros, function($message) use( $email, $emailseguimiento, $texto ) {
                            $message
                                    ->to($email)
                                    ->cc($emailseguimiento)
                                    ->subject($texto);
                        }
                        );
                        $alerta = new Alerta;
                        $alerta['ruta_id'] = $value->ruta_id;
                        $alerta['ruta_detalle_id'] = $value->ruta_detalle_id;
                        $alerta['persona_id'] = $value->persona_id;
                        $alerta['tipo'] = $tipo;
                        $alerta['fecha'] = DATE("Y-m-d");
                        $alerta['clasificador'] = 2;
                        $alerta->save();
                        $retorno['persona_id'][] = $value->persona_id;
                    }
                } catch (Exception $e) {
                    DB::rollback();
                    $retorno['id_union'][] = $value->plataforma;
                    //echo $qem[$k]->email."<br>";
                }
                DB::commit();
            }
        }

        return Response::json(
                        array(
                            'rst' => 1,
                            'datos' => $rst
                        )
        );
    }

    public function index() {
        //
    }

    /**
     * Show the form for creating a new resource.
     * GET /prueba/create
     *
     * @return Response
     */
    public function create() {
        //
    }

    /**
     * Store a newly created resource in storage.
     * POST /prueba
     *
     * @return Response
     */
    public function store() {
        //
    }

    /**
     * Display the specified resource.
     * GET /prueba/{id}
     *
     * @param  int  $id
     * @return Response
     */
    public function show($id) {
        //
    }

    /**
     * Show the form for editing the specified resource.
     * GET /prueba/{id}/edit
     *
     * @param  int  $id
     * @return Response
     */
    public function edit($id) {
        //
    }

    /**
     * Update the specified resource in storage.
     * PUT /prueba/{id}
     *
     * @param  int  $id
     * @return Response
     */
    public function update($id) {
        //
    }

    /**
     * Remove the specified resource from storage.
     * DELETE /prueba/{id}
     *
     * @param  int  $id
     * @return Response
     */
    public function destroy($id) {
        //
    }

}
